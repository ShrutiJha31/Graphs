class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& e, vector<double>& succProb, int start, int end) {
        priority_queue<pair<double,int>>q;
        unordered_map<int,vector<pair<double,int>>>mp;
        for(int i=0;i<e.size();i++)
        {
            mp[e[i][0]].push_back({succProb[i],e[i][1]});
            mp[e[i][1]].push_back({succProb[i],e[i][0]});
        }
        vector<double>dp(n,-1e8);
        dp[start]=1;
        q.push({1,start});
        
        while(!q.empty())
        {
           int node = q.top().second;
            double curr_weight = q.top().first;
            q.pop();
            for(auto itr:mp[node])
            {
                if(dp[itr.second]<curr_weight*itr.first)
                {
                      dp[itr.second]=curr_weight*itr.first;
                  
                    q.push({dp[itr.second],itr.second});
                }
            }
            
        }
        if(dp[end]==-1e8)
            return 0;
        return dp[end];
        
        
            }
};
